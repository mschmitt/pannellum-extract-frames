#!/usr/bin/env python3
import asyncio
import pyppeteer
import numpy
import argparse
import time

parser = argparse.ArgumentParser(description='Extract frames from a pannellum panorama, as if in a circular motion.')
parser.add_argument('--url', help='URL of pannellum panorama', nargs=1, required=True)
parser.add_argument('--width', help='virtual browser width, default 1080', type=int, nargs=1, default=[1080])
parser.add_argument('--height', help='virtual browser height, default 1080', type=int, nargs=1, default=[1080])
parser.add_argument('--pitch', help='negative: look down, positive: look up, default 0', type=float, nargs=1, default=[0])
parser.add_argument('--yaw', help='start yaw from where to start panning, default 0', type=float, nargs=1, default=[0])
parser.add_argument('--browser', help='name of browser binary, default chromium', nargs=1, default=['chromium'])
parser.add_argument('--format', help='format of exported frames jpg or png, default jpg', nargs=1, choices=['jpg', 'png'], default=['jpg'])
parser.add_argument('--debug', help='show debug/progress output', action='store_true')
args = parser.parse_args()

base_pano  = args.url[0]
add_pitch  = f'&pitch={args.pitch[0]}'
viewport   = { 'width': args.width[0], 'height': args.height[0] }
add_rotate = '&autoRotate=0'
add_fov    = '&hfov=120'

async def main():
	counter = 0
	if args.debug: print("launch")
	browser = await pyppeteer.launch({'executablePath': args.browser[0]})
	for x in numpy.arange(args.yaw[0],args.yaw[0]+360,0.5):
		start = time.time()
		full_url = f"{base_pano}{add_rotate}{add_fov}{add_pitch}&yaw={x}"
		print(f'{time.time() - start:.3f}s {full_url}')
		filename = f"frame{counter:05}.{args.format[0]}"
		counter+=1
		if args.debug: print(f'{time.time() - start:.3f}s will save frame to: {filename}')
		if args.debug: print(f'{time.time() - start:.3f}s new page')
		page = await browser.newPage()
		if args.debug: print(f'{time.time() - start:.3f}s set viewport')
		await page.setViewport( viewport )
		if args.debug: print(f'{time.time() - start:.3f}s goto url')
		status = await page.goto(full_url, { 'waitUntil': 'load' })
		if args.debug: print(f'{time.time() - start:.3f}s start waiting for selector')
		await page.waitForSelector('.pnlm-container')
		if args.debug: print(f'{time.time() - start:.3f}s start waiting for function')
		await page.waitForFunction('viewer.isLoaded()')
		if args.debug: print(f'{time.time() - start:.3f}s evaluate js')
		await page.evaluate('''
			Array.from(document.getElementsByClassName("pnlm-controls-container")).forEach(
				function(element, index, array) {
				element.style.display = "none"
				})
			Array.from(document.getElementsByClassName("pnlm-panorama-info")).forEach(
				function(element, index, array) {
				element.style.display = "none"
				})
			Array.from(document.getElementsByClassName("pnlm-hotspot")).forEach(
				function(element, index, array) {
				element.style.display = "none"
				})
				''')
		if args.debug: print(f'{time.time() - start:.3f}s take screenshot')
		await page.screenshot({'path': filename, 'quality': 90})
		if args.debug: print(f'{time.time() - start:.3f}s close page')
		await page.close()
		end = time.time()
		print(f'{time.time() - start:.3f}s frame {filename} saved')
	if args.debug: print("close")
	await browser.close()
asyncio.get_event_loop().run_until_complete(main())
