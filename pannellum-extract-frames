#!/usr/bin/env python3
import asyncio
import pyppeteer
import numpy
import argparse

parser = argparse.ArgumentParser(description='Extract frames from a pannellum panorama, as if in a circular motion.')
parser.add_argument('--url', help='URL of pannellum panorama', nargs=1, required=True)
parser.add_argument('--width', help='virtual browser width, default 1080', type=int, nargs=1, default=[1080])
parser.add_argument('--height', help='virtual browser height, default 1080', type=int, nargs=1, default=[1080])
parser.add_argument('--pitch', help='negative: look down, positive: look up, default 0', type=float, nargs=1, default=[0])
parser.add_argument('--yaw', help='start yaw from where to start panning, default 0', type=float, nargs=1, default=[0])
parser.add_argument('--browser', help='name of browser binary, default chromium', nargs=1, default=['chromium'])
args = parser.parse_args()

base_pano  = args.url[0]
add_pitch  = f'&pitch={args.pitch[0]}'
viewport   = { 'width': args.width[0], 'height': args.height[0] }
add_rotate = '&autoRotate=0'
add_fov    = '&hfov=120'

async def main():
	counter = 0
	for x in numpy.arange(args.yaw[0],args.yaw[0]+360,0.5):
		full_url = f"{base_pano}{add_rotate}{add_fov}{add_pitch}&yaw={x}"
		print(full_url)
		filename = f"frame{counter:05}.png"
		counter+=1
		print(f'Saving frame to: {filename}')
		# print("launch")
		browser = await pyppeteer.launch({'executablePath': args.browser[0], 'args': [ '--disk-cache-dir=/tmp/' ] })
		# print("newPage")
		page = await browser.newPage()
		# print("setViewport")
		await page.setViewport( viewport )
		# print("goto")
		status = await page.goto(full_url, { 'waitUntil': 'networkidle0' })
		# print("evaluate")
		await page.evaluate('''
			Array.from(document.getElementsByClassName("pnlm-controls-container")).forEach(
				function(element, index, array) {
				element.style.display = "none"
				})
			Array.from(document.getElementsByClassName("pnlm-panorama-info")).forEach(
				function(element, index, array) {
				element.style.display = "none"
				})
			Array.from(document.getElementsByClassName("pnlm-hotspot")).forEach(
				function(element, index, array) {
				element.style.display = "none"
				})
				''')
		# print("screenshot")
		await page.screenshot({'path': filename})
		# print("close")
		await page.close()
		await browser.close()
asyncio.get_event_loop().run_until_complete(main())
